// –ü–ª–∞–≥–∏–Ω –¥–ª—è Lampa: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å—Ç—Ä–∏–º–∏–Ω–≥–æ–≤—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ TMDB
// –ê–≤—Ç–æ—Ä: Grok (–Ω–∞ –æ—Å–Ω–æ–≤–µ Lampa API)
// –í–µ—Ä—Å–∏—è: 1.1

(function() {
    'use strict';

    // –°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–∏—Å–æ–≤ (ID –∏–∑ TMDB)
    const providers = {
        'Netflix': 8,
        'HBO Max': 2,
        'Hulu': 3,
        'Disney+': 99,
        'Prime Video': 9
    };

    const REGION = 'US'; // –ò–ª–∏ 'RU' –¥–ª—è –†–æ—Å—Å–∏–∏

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è fetching —á–µ—Ä–µ–∑ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π TMDB Lampa
    function fetchContent(providerId, category, page = 1) {
        let url = '';
        let params = {
            language: 'ru-RU',
            watch_region: REGION,
            with_watch_providers: providerId,
            page: page
        };

        switch (category) {
            case 'movies':
                url = '/discover/movie';
                break;
            case 'series':
                url = '/discover/tv';
                break;
            case 'new':
                url = '/trending/all/week';
                break;
            case 'popular':
                url = '/discover/movie'; // –î–ª—è —Å–µ—Ä–∏–∞–ª–æ–≤ ‚Äî '/discover/tv'
                if (category === 'series') url = '/discover/tv';
                params.sort_by = 'popularity.desc';
                break;
            default:
                return Promise.reject('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è');
        }

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π TMDB Lampa (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
        if (typeof Lampa.TMDB !== 'undefined' && Lampa.TMDB.request) {
            return Lampa.TMDB.request(url, params).then(data => processTMDBData(data));
        } else if (typeof Lampa.Api !== 'undefined' && Lampa.Api.tmdb) {
            return Lampa.Api.tmdb({url: url, params: params}).then(data => processTMDBData(data));
        } else {
            // Fallback –Ω–∞ –ø—Ä—è–º–æ–π fetch (—Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º –∫–ª—é—á–æ–º Lampa, –µ—Å–ª–∏ –∏–∑–≤–µ—Å—Ç–µ–Ω; –∏–Ω–∞—á–µ —É–∫–∞–∂–∏ —Å–≤–æ–π)
            const TMDB_API_KEY = ''; // Lampa –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–≤–æ–π, –Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∞ –≤–æ–∑—å–º–∏ —Å themoviedb.org
            const fullUrl = `https://api.themoviedb.org/3${url}?api_key=${TMDB_API_KEY}&${new URLSearchParams(params)}`;
            return fetch(fullUrl).then(res => res.json()).then(data => processTMDBData(data));
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö TMDB (–æ–±—â–µ–µ –¥–ª—è –≤—Å–µ—Ö –º–µ—Ç–æ–¥–æ–≤)
    function processTMDBData(data) {
        if (data.results) {
            return data.results.map(item => ({
                title: item.title || item.name,
                original_title: item.original_title || item.original_name,
                img: `https://image.tmdb.org/t/p/w300${item.poster_path}`,
                description: item.overview,
                year: item.release_date ? new Date(item.release_date).getFullYear() : (item.first_air_date ? new Date(item.first_air_date).getFullYear() : ''),
                id: item.id,
                type: item.title ? 'movie' : 'tv'
            }));
        }
        return [];
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–º–µ–Ω—é (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    function createSubMenu(providerName, providerId) {
        const html = `
            <div class="selector" style="padding: 20px;">
                <div class="full-start__buttons selector no-margin">
                    <div class="full-start__button selector" data-action="movies">
                        <div class="full-start__button-titles">
                            <div class="full-start__button-title">–§–∏–ª—å–º—ã</div>
                        </div>
                    </div>
                    <div class="full-start__button selector" data-action="series">
                        <div class="full-start__button-titles">
                            <div class="full-start__button-title">–°–µ—Ä–∏–∞–ª—ã</div>
                        </div>
                    </div>
                    <div class="full-start__button selector" data-action="new">
                        <div class="full-start__button-titles">
                            <div class="full-start__button-title">–ù–æ–≤–∏–Ω–∫–∏</div>
                        </div>
                    </div>
                    <div class="full-start__button selector" data-action="popular">
                        <div class="full-start__button-titles">
                            <div class="full-start__button-title">–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ</div>
                        </div>
                    </div>
                </div>
            </div>
        `;

        $(html).find('[data-action]').on('hover:enter', function(e) {
            const action = $(this).data('action');
            if (action === 'series') action = 'series'; // –î–ª—è popular —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ fetch
            loadContent(providerName, providerId, action);
        });

        return html;
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–¥ Lampa)
    function loadContent(providerName, providerId, category) {
        fetchContent(providerId, category).then(items => {
            if (items.length === 0) {
                Lampa.Noty.show('–ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return;
            }

            // –°–æ–∑–¥–∞—ë–º HTML –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫
            let html = '';
            items.forEach(item => {
                html += `<div class="full-item" data-item="${JSON.stringify(item)}">
                    <div class="full-item__img" style="background-image: url(${item.img});"></div>
                    <div class="full-item__title">${item.title} (${item.year})</div>
                    <div class="full-item__text">${item.description.substring(0, 100)}...</div>
                </div>`;
            });

            // –ü—É—à–∏–º –≤ Activity Lampa
            Lampa.Activity.push({
                url: '',
                title: `${providerName} - ${category.charAt(0).toUpperCase() + category.slice(1)}`,
                component: 'full',
                html: `<div class="full-start__body selector">${html}</div>`,
                onBack: () => Lampa.Activity.back(),
                // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫—É (Lampa —Å–∞–º–∞ –Ω–∞–π–¥—ë—Ç —Ç–æ—Ä—Ä–µ–Ω—Ç—ã/–æ–Ω–ª–∞–π–Ω)
                toggle: () => {
                    $('.full-item').on('hover:enter', function() {
                        const item = JSON.parse($(this).attr('data-item'));
                        Lampa.Activity.push({
                            url: item.id,
                            component: 'full',
                            movie: { object: item }
                        });
                    });
                }
            });
        }).catch(err => Lampa.Noty.show('–û—à–∏–±–∫–∞: ' + err.message));
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –º–µ–Ω—é (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    Lampa.Listener.follow('app', function(e) {
        if (e.type == 'ready') {
            const menuItem = {
                title: '–°–µ—Ä–≤–∏—Å—ã',
                items: Object.keys(providers).map(name => ({
                    title: name,
                    subtitle: '–§–∏–ª—å–º—ã, —Å–µ—Ä–∏–∞–ª—ã, –Ω–æ–≤–∏–Ω–∫–∏',
                    one: 'üõãÔ∏è',
                    action: () => {
                        const html_string = createSubMenu(name, providers[name]);
                        Lampa.Select.show({
                            title: name,
                            items: [],
                            html: html_string,
                            onSelect: false,
                            onBack: () => Lampa.Activity.back()
                        });
                    }
                }))
            };
            if (Lampa.Menu) {
                Lampa.Menu.add('main', menuItem, { before: 'catalog' });
            }
        }
    });

    console.log('–ü–ª–∞–≥–∏–Ω Streaming Services (TMDB Lampa) –∑–∞–≥—Ä—É–∂–µ–Ω');
})();
