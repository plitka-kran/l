// –ü–ª–∞–≥–∏–Ω –¥–ª—è Lampa: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å—Ç—Ä–∏–º–∏–Ω–≥–æ–≤—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
// –ê–≤—Ç–æ—Ä: Grok (–Ω–∞ –æ—Å–Ω–æ–≤–µ Lampa API)
// –í–µ—Ä—Å–∏—è: 1.0

(function() {
    'use strict';

    // –°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–∏—Å–æ–≤ (ID –∏–∑ TMDB: netflix=8, hbo=2, hulu=3, disney=99, prime=9)
    const providers = {
        'Netflix': 8,
        'HBO Max': 2,
        'Hulu': 3,
        'Disney+': 99,
        'Prime Video': 9
    };

    // TMDB API –∫–ª—é—á (–∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ; Lampa –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π)
    const TMDB_API_KEY = '—Ç–≤–æ–π_api_key_–∑–¥–µ—Å—å'; // –ü–æ–ª—É—á–∏ –Ω–∞ https://www.themoviedb.org/
    const TMDB_BASE = 'https://api.themoviedb.org/3';
    const REGION = 'US'; // –ò–∑–º–µ–Ω–∏ –Ω–∞ 'RU' –¥–ª—è –†–æ—Å—Å–∏–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è fetching –¥–∞–Ω–Ω—ã—Ö –∏–∑ TMDB
    function fetchContent(providerId, category, page = 1) {
        let endpoint = '';
        let params = `?api_key=${TMDB_API_KEY}&language=ru-RU&watch_region=${REGION}&with_watch_providers=${providerId}&page=${page}`;
        
        switch (category) {
            case 'movies':
                endpoint = '/discover/movie' + params;
                break;
            case 'series':
                endpoint = '/discover/tv' + params;
                break;
            case 'new':
                endpoint = '/trending/all/week' + params; // –ù–æ–≤–∏–Ω–∫–∏ (trending)
                break;
            case 'popular':
                endpoint = '/discover/movie' + params + '&sort_by=popularity.desc'; // –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ (–¥–ª—è —Ñ–∏–ª—å–º–æ–≤, –∞–Ω–∞–ª–æ–≥ –¥–ª—è —Å–µ—Ä–∏–∞–ª–æ–≤)
                if (category === 'series') endpoint = '/discover/tv' + params + '&sort_by=popularity.desc';
                break;
            default:
                return Promise.reject('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è');
        }

        return fetch(TMDB_BASE + endpoint)
            .then(response => response.json())
            .then(data => {
                if (data.results) {
                    return data.results.map(item => ({
                        title: item.title || item.name,
                        original_title: item.original_title || item.original_name,
                        img: `https://image.tmdb.org/t/p/w300${item.poster_path}`,
                        description: item.overview,
                        year: item.release_date ? new Date(item.release_date).getFullYear() : item.first_air_date ? new Date(item.first_air_date).getFullYear() : '',
                        id: item.id,
                        type: category === 'movies' || category === 'popular' && !item.name ? 'movie' : 'tv'
                    }));
                }
                return [];
            })
            .catch(err => {
                Lampa.Noty.show('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ' + err.message);
                return [];
            });
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–º–µ–Ω—é (—Ñ–∏–ª—å–º—ã, —Å–µ—Ä–∏–∞–ª—ã –∏ —Ç.–¥.)
    function createSubMenu(providerName, providerId) {
        const html = `
            <div class="selector" style="padding: 20px;">
                <div class="full-start__buttons selector no-margin">
                    <div class="full-start__button selector" data-action="movies">
                        <div class="full-start__button-titles">
                            <div class="full-start__button-title">–§–∏–ª—å–º—ã</div>
                        </div>
                    </div>
                    <div class="full-start__button selector" data-action="series">
                        <div class="full-start__button-titles">
                            <div class="full-start__button-title">–°–µ—Ä–∏–∞–ª—ã</div>
                        </div>
                    </div>
                    <div class="full-start__button selector" data-action="new">
                        <div class="full-start__button-titles">
                            <div class="full-start__button-title">–ù–æ–≤–∏–Ω–∫–∏</div>
                        </div>
                    </div>
                    <div class="full-start__button selector" data-action="popular">
                        <div class="full-start__button-titles">
                            <div class="full-start__button-title">–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ</div>
                        </div>
                    </div>
                </div>
            </div>
        `;

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∏–∫–æ–≤
        $(html).find('[data-action]').on('hover:enter', function(e) {
            const action = $(this).data('action');
            loadContent(providerName, providerId, action);
        });

        return html;
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    function loadContent(providerName, providerId, category) {
        fetchContent(providerId, category).then(items => {
            if (items.length === 0) {
                Lampa.Noty.show('–ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return;
            }

            // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º —à–∞–±–ª–æ–Ω Lampa)
            const html = items.map(item => Lampa.Template.get('card', {
                title: item.title,
                subtitle: item.year,
                img: item.img,
                description: item.description,
                href: item.id // –î–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –¥–µ—Ç–∞–ª–∏ Lampa
            })).join('');

            // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ Lampa (cards view)
            var params = {
                title: `${providerName} - ${category.toUpperCase()}`,
                html: html,
                object: { // –û–±—ä–µ–∫—Ç –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
                    source: 'tmdb',
                    page: 1
                }
            };
            Lampa.Activity.push({
                url: '',
                title: params.title,
                component: 'full',
                search: params.title,
                search_one: params.title,
                search_two: params.title,
                movie: { object: params.object },
                page: 1,
                html: Lampa.Template.get('items_line', { items: items }) // –ò–ª–∏ cards
            });
        });
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–ª–µ–≤—ã–π —Å–∞–π–¥–±–∞—Ä)
    Lampa.Listener.follow('app', function(e) {
        if (e.type === 'ready') {
            // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª "–°–µ—Ä–≤–∏—Å—ã" –≤ –º–µ–Ω—é
            const menuItem = {
                title: '–°–µ—Ä–≤–∏—Å—ã',
                items: Object.keys(providers).map(providerName => ({
                    title: providerName,
                    subtitle: '–§–∏–ª—å–º—ã, —Å–µ—Ä–∏–∞–ª—ã –∏ –Ω–æ–≤–∏–Ω–∫–∏',
                    one: 'üõãÔ∏è',
                    action: () => {
                        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥–º–µ–Ω—é
                        html_string = createSubMenu(providerName, providers[providerName]);
                        Lampa.Select.show({
                            title: providerName,
                            items: [], // –ü—É—Å—Ç–æ–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—Å—Ç–æ–º html
                            html: html_string,
                            onSelect: false,
                            onBack: () => Lampa.Activity.back()
                        });
                    }
                }))
            };

            // –í—Å—Ç–∞–≤–ª—è–µ–º –≤ –º–µ–Ω—é (Lampa.Menu.add –∏–ª–∏ extend)
            if (typeof Lampa.Menu !== 'undefined') {
                Lampa.Menu.add('main', menuItem, { before: 'catalog' }); // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–¥ "–ö–∞—Ç–∞–ª–æ–≥"
            } else {
                console.log('Lampa.Menu –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, –ø–ª–∞–≥–∏–Ω –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
            }
        }
    });

    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –¥–µ–±–∞–≥–∞
    console.log('–ü–ª–∞–≥–∏–Ω Streaming Services –∑–∞–≥—Ä—É–∂–µ–Ω');
})();
